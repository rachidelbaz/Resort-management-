@model ResortManagement.Areas.Dashboard.Models.AccommondationListingTypesViewModel
@{
    ViewBag.Title = "Listing";
}
@if (Model != null && Model.accommodationTypes != null && Model.accommodationTypes.Count() > 0)
{

    <!--Table-->
    <table class="table table-striped table-dark">
        <thead>
            <tr>

                <th scope="col">Type name</th>
                <th scope="col">Description</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var AccommondationType in Model.accommodationTypes)
            {
                <tr>
                    <th scope="row">@AccommondationType.Type</th>
                    <td>@AccommondationType.Description</td>
                    <td><button class="btn btn-outline-primary mr-2 btnAction" 
                                data-toggle="modal" data-target="#exampleModalCenter"
                                data-href="@Url.Action("Action", "AccommodationTypes", 
                                          new { ID = @AccommondationType.ID})">
                        <i class="fas fa-edit fa-1x mr-1"></i>Edit</button>
                    <button class="btn btn-outline-danger btnDelete" 
                            data-href="@Url.Action("Delete", "AccommodationTypes", 
                                      new { ID = @AccommondationType.ID})">
                        <i class="fas fa-trash-alt fa-1x mr-1"></i>Delete</button></td>


                </tr>
            }

        </tbody>
    </table>

    <!--End Table-->
    if (Model.pager != null && Model.pager.TotalPages > 1)
    {
        <!-- pagination table -->
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-end">


                <li class="page-item @(Model.pager.CurrentPage > 1 ? string.Empty:"disabled")">
                    <a class="page-link btn-link" tabindex="-1" data-PageNo="@(Model.pager.CurrentPage-1)">Previous</a>
                </li>
                @for (var page = Model.pager.StartPage; page <= Model.pager.EndPage; page++)
                {

                    <li class="page-item @(Model.pager.CurrentPage==page?"active" :string.Empty)"><a class="page-link btn-link" data-PageNo="@(page)">@(page)</a></li>

                }
                <li class="page-item @(Model.pager.CurrentPage < Model.pager.EndPage ? string.Empty:"disabled")">
                    <a class="page-link btn-link" data-PageNo="@(Model.pager.EndPage)">Next</a>
                </li>




            </ul>
        </nav>
        <!--end pagination table-->
    }

}
else if (!string.IsNullOrEmpty(Model.SearchTerm))
{
    <div class="alert alert-warning" role="alert">
        Sorry! No Data Found!
    </div>
}
else
{
    <div class="alert alert-warning" role="alert">
        Sorry! No record registred yet!
    </div>
}

<script>
    $('.btnDelete').click(function () {
        
        const dataHref = $(this).attr('data-href');
        //condition for handling showing div else no record registred yet . 
        let pageNo = '@(Model.PageNo==Model.pager.EndPage && Model.accommodationTypes.Count()==1?Model.PageNo-1:Model.PageNo)';
        const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
                confirmButton: 'btn btn-danger',
                cancelButton: 'btn btn-success'
            },
            buttonsStyling: false
        });

        swalWithBootstrapButtons.fire({
            title: 'Are you sure?',
            text: "You wanna delete this record!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {
                $.ajax({
                    url: dataHref,
                    type: 'POST',
                    dataType: 'json'
                }).done(function (response) {
                    if (response.Success) {
                        swalWithBootstrapButtons.fire(
                            'Deleted!',
                            'Your file has been deleted.',
                            'success'
                        );
                                            
                         refreshTableListing('@Model.SearchTerm','@Model.PageSize',pageNo);

                    } else {
                         swalWithBootstrapButtons.fire(
                            'Error!',
                            'Your file has been deleted.',
                            'error'
                        );
                    }
                });
                
            } else if (
                /* Read more about handling dismissals below */
                result.dismiss === Swal.DismissReason.cancel
            ) {
                swalWithBootstrapButtons.fire(
                    'Cancelled',
                    'Your Accommodation type record is safe :)',
                    'error'
                );
            }
        });

    });
    
    $(".btnAction").click(function () {

        $(".modal-content").load($(this).attr('data-href'), function (response,status,xhr) {
         
        });
    });

     $(".pagination li a").on({
         'click': function () {

             let pageNo = $(this).attr("data-PageNo");
             refreshTableListing('@Model.SearchTerm','@Model.PageSize',pageNo);

    },'mouseover':function () { $(this).css('cursor', 'pointer'); }
    });
</script>


